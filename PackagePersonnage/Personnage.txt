 package PackagePersonnage;

import java.awt.Image;

import javax.swing.ImageIcon;

import PackageObjets.Objet;
import PanthreNoirePackage.ClassePrincipale;

public class Personnage {
	// *** Variables***//

	private int largeur, hauteur;// Dimension du personnage
	private int x, y;// position du personnage
	protected boolean personnage_en_marche;// vrai quand le personnage se déplace
	protected boolean personnage_tournE_vers_la_droite; // vrai quand le personnage est tourné vers la droite
	public int compteur_des_pas;// compteur des pas du personnage
	protected boolean vivant =true;

	// contructeur

	public Personnage(int x, int y, int largeur, int hauteur) {
		this.x = x;
		this.y = y;
		this.largeur = largeur;
		this.hauteur = hauteur;
		this.personnage_en_marche = false;
		this.personnage_tournE_vers_la_droite = true;
	}

	
	// ***Méthodes***//
	
	
	//DeplacementDesPersonnages
	
	public Image marche(String nom, int frequence_des_pas) {
		String str;
		ImageIcon ico;
		Image img;
		
		if(this.personnage_en_marche == false) {
			if(this.personnage_tournE_vers_la_droite == true) {str = "/pictures/" + nom + "ArretDroite.png";}
			else {str = "/pictures/" + nom + "ArretGauche.png";}}
		
		else  {
			this.compteur_des_pas++;
			if (this.compteur_des_pas / frequence_des_pas == 0) {
				if(this.personnage_tournE_vers_la_droite == true) { str= "/pictures/" + nom + "ArretDroite.png";}
				else str = "/pictures/" + nom + "ArretGauche.png";
			}
			else {
				if(this.personnage_tournE_vers_la_droite == true) { str= "/pictures/" + nom + "MarcheDroite.png";}
				else str = "/pictures/" + nom + "MarcheGauche.png";}
			if(this.compteur_des_pas == 2 * frequence_des_pas) {this.compteur_des_pas = 0;}
		}
		
		//Affichage de l'image du personnage
		
		ico = new ImageIcon(getClass().getResource(str));
		img = ico.getImage();
		return img;
		
	}
	
	public void deplacement() {
		if(ClassePrincipale.scene.getXposition() >= 0)
			this.x= this.x - ClassePrincipale.scene.getDx();
	}
	
	
	//ContactAvant
	
	protected boolean contactAvant(Objet objet) {
		if(this.x + this.largeur < objet.getX() 
				|| this.x + this.largeur > objet.getX() + 5
				|| this.y + this.hauteur <= objet.getY()
				|| this.y >= objet.getY() + objet.getHauteur()) 
		{return false;}
		else {return true;}
	}
	
	//ContactArriere
	
	protected boolean contactArriere(Objet objet) {
		if(this.x > objet.getX() + objet.getLargeur() 
		   || this.x + this.largeur < objet.getX() + objet.getLargeur() -5
		   || this.y + this.hauteur <= objet.getY()
		   || this.y >= objet.getY() + objet.getHauteur())
		{return false;}
		else {return true;}
	}
		
	//ContactDessus
		
	protected boolean contactDessus(Objet objet) {
		if(this.x + this.largeur < objet.getX() + 5
			|| this.x > objet.getX() + objet.getLargeur() - 5
			|| this.y < objet.getY() + objet.getHauteur()
			|| this.y > objet.getY() + objet.getHauteur() + 5)
		{return false;}
		else {return true;}	
	}
		
	//ContactDessous
		
	protected boolean contactDessous(Objet objet) {
		if(this.x +  this.largeur < objet.getX() + 5 
			|| this.x > objet.getX() + objet.getLargeur() -5
			|| this.y + this.hauteur < objet.getY() 
			|| this.y + this.hauteur > objet.getY() + 5)
		{return false;}
		else {return true;}	
	}
	

	public boolean proche(Objet objet){
		if((this.getX() > objet.getX() - 10 && this.getX() < objet.getX() + objet.getLargeur() + 10)
			|| (this.getX() + this.getLargeur()	> objet.getX() - 10 && this.getX() + this.getLargeur()	< objet.getX() + objet.getLargeur() + 10))
		{return true;}
		else {return false;}
	    }
	
	
	
	//Contact Avant entre personnages
	
		protected boolean contactAvant(Personnage personnage) {
			if(this.isPersonnage_tournE_vers_la_droite() == true) {
			if(this.x + this.largeur < personnage.getX() 
					|| this.x + this.largeur > personnage.getX() + 5
					|| this.y + this.hauteur <= personnage.getY()
					|| this.y >= personnage.getY() + personnage.getHauteur()) {return false;}
			{return true;}
			}else {return false;}
		}
		
		//Contact Arriere entre personnages
		
		protected boolean contactArriere(Personnage personnage) {
			if(this.x > personnage.getX() + personnage.getLargeur() 
			   || this.x + this.largeur < personnage.getX() + personnage.getLargeur() -5
			   || this.y + this.hauteur <= personnage.getY()
			   || this.y >= personnage.getY() + personnage.getHauteur())
			{return false;}
			else {return true;}
		}
		
		//Contact quand Mario saute sur un personnage 
		
		protected boolean contactDessous(Personnage personnage) {
			if(this.x +  this.largeur < personnage.getX()
				|| this.x > personnage.getX() + personnage.getLargeur()
				|| this.y + this.hauteur < personnage.getY() 
				|| this.y + this.hauteur > personnage.getY())
			{return false;}
			else {return true;}	
		}
		
		//Méthode proche pour les personnages 
		
		public boolean proche(Personnage personnage){
			if((this.getX() > personnage.getX() - 10 && this.getX() < personnage.getX() + personnage.getLargeur() + 10)
				|| (this.getX() + this.getLargeur()	> personnage.getX() - 10 && this.getX() + this.getLargeur()	< personnage.getX() + personnage.getLargeur() + 10))
			{return true;}
			else {return false;}
		    }
	// ***getters et setters***//

		public int getLargeur() {return largeur;}
		public void setLargeur(int largeur) {this.largeur = largeur;}
		public int getHauteur() {return hauteur;}
		public void setHauteur(int hauteur) {this.hauteur = hauteur;}
		public int getX() {	return x;}
		public void setX(int x) {this.x = x;}
		public int getY() {return y;}
		public void setY(int y) {this.y = y;}
		public boolean isPersonnage_en_marche() {return personnage_en_marche;}
		public void setPersonnage_en_marche(boolean personnage_en_marche) {this.personnage_en_marche = personnage_en_marche;}
		public boolean isPersonnage_tournE_vers_la_droite() {return personnage_tournE_vers_la_droite;}
		public void setPersonnage_tournE_vers_la_droite(boolean personnage_tournE_vers_la_droite) {this.personnage_tournE_vers_la_droite = personnage_tournE_vers_la_droite;}
		public int getCompteur_des_pas() {return compteur_des_pas;}
		public void setCompteur_des_pas(int compteur_des_pas) {this.compteur_des_pas = compteur_des_pas;}
		public boolean isVivant() {return vivant;}
		public void setVivant(boolean vivant) {this.vivant = vivant;}
		

}
